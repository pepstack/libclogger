/*******************************************************************************
* Copyright © 2024-2025 Light Zhang <mapaware@hotmail.com>, MapAware, Inc.     *
* ALL RIGHTS RESERVED.                                                         *
*                                                                              *
* PERMISSION IS HEREBY GRANTED, FREE OF CHARGE, TO ANY PERSON OR ORGANIZATION  *
* OBTAINING A COPY OF THE SOFTWARE COVERED BY THIS LICENSE TO USE, REPRODUCE,  *
* DISPLAY, DISTRIBUTE, EXECUTE, AND TRANSMIT THE SOFTWARE, AND TO PREPARE      *
* DERIVATIVE WORKS OF THE SOFTWARE, AND TO PERMIT THIRD - PARTIES TO WHOM THE  *
* SOFTWARE IS FURNISHED TO DO SO, ALL SUBJECT TO THE FOLLOWING :               *
*                                                                              *
* THE COPYRIGHT NOTICES IN THE SOFTWARE AND THIS ENTIRE STATEMENT, INCLUDING   *
* THE ABOVE LICENSE GRANT, THIS RESTRICTION AND THE FOLLOWING DISCLAIMER, MUST *
* BE INCLUDED IN ALL COPIES OF THE SOFTWARE, IN WHOLE OR IN PART, AND ALL      *
* DERIVATIVE WORKS OF THE SOFTWARE, UNLESS SUCH COPIES OR DERIVATIVE WORKS ARE *
* SOLELY IN THE FORM OF MACHINE - EXECUTABLE OBJECT CODE GENERATED BY A SOURCE *
* LANGUAGE PROCESSOR.                                                          *
*                                                                              *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     *
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT   *
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE    *
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,  *
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  *
* DEALINGS IN THE SOFTWARE.                                                    *
*******************************************************************************/
/*
** @file uatomic.h
**  user CAS atomic api both for Windows and Linux
**
** Usage:
**   uatomic_int  i;
**   uatomic_int_set(&i, 0);
**   uatomic_int_add(&i);
**
** @author Liang Zhang <350137278@qq.com>
** @version 0.0.4
** @since 2019-12-15 12:46:50
** @date 2025-03-24 03:39:00
*/
#ifndef _U_ATOMIC_H__
#define _U_ATOMIC_H__


#include "timeut.h"  // sleep_usec()

#if defined(__WINDOWS__) // Windows
# include <Winsock2.h>
# include <Windows.h>

# include <process.h>
# include <stdint.h>
# include <time.h>
# include <limits.h>

# ifdef _LINUX_GNUC
# undef _LINUX_GNUC
# endif
#elif defined(__GNUC__) // Linux
# if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 1)
# error GCC version must be greater or equal than 4.1.2
# endif

# include <sched.h>
# include <pthread.h>

# include <unistd.h>
# include <stdint.h>
# include <time.h>
# include <signal.h>
# include <errno.h>
# include <limits.h>

# include <sys/time.h>
# include <sys/sysinfo.h>

# ifndef _LINUX_GNUC
# define _LINUX_GNUC
# endif
#else // TODO: MACOSX
# error "Currently only Windows and Linux os are supported."
#endif


#if defined(_LINUX_GNUC) || defined(__CYGWIN__)
// Linux (实现GCC/Clang)
typedef volatile int         uatomic_int;
typedef uatomic_int          uatomic_bool;

#   define uatomic_int_add(a)           __sync_add_and_fetch(a, 1)
#   define uatomic_int_sub(a)           __sync_sub_and_fetch(a, 1)
#   define uatomic_int_set(a, newval)   __sync_lock_test_and_set(a, (newval))
#   define uatomic_int_get(a)           __sync_fetch_and_add(a, 0)
#   define uatomic_int_zero(a)          __sync_lock_release(a)
#   define uatomic_int_comp_exch(a, comp, exch)  __sync_val_compare_and_swap(a, (comp), (exch))

#   define uatomic_int_add_n(a, n)      __sync_add_and_fetch(a, (int)(n))
#   define uatomic_int_sub_n(a, n)      __sync_sub_and_fetch(a, (int)(n))

typedef volatile int64_t     uatomic_int64;

#   define uatomic_int64_add(a)         __sync_add_and_fetch(a, 1)
#   define uatomic_int64_sub(a)         __sync_sub_and_fetch(a, 1)
#   define uatomic_int64_set(a, newval) __sync_lock_test_and_set(a, (newval))
#   define uatomic_int64_get(a)         __sync_fetch_and_add(a, 0)
#   define uatomic_int64_zero(a)        __sync_lock_release(a)
#   define uatomic_int64_comp_exch(a, comp, exch)  uatomic_int_comp_exch(a, (comp), (exch))

#   define uatomic_int64_add_n(a, n)    __sync_add_and_fetch(a, (int64_t)(n))
#   define uatomic_int64_sub_n(a, n)    __sync_sub_and_fetch(a, (int64_t)(n))

typedef volatile void *      uatomic_ptr;

#   define uatomic_ptr_set(a, newval)   uatomic_int_set(((void**)(a)), (newval))
#   define uatomic_ptr_get(a)           uatomic_int_get(((void**)(a)))
#   define uatomic_ptr_zero(a)          uatomic_int_zero(((void**)(a)))
#   define uatomic_ptr_comp_exch(a, comp, exch)  uatomic_int_comp_exch(((void**)(a)), (comp), (exch))

#elif defined(__WINDOWS__)
typedef volatile LONG        uatomic_int;
typedef uatomic_int          uatomic_bool;

// Windows
#   define uatomic_int_add(a)           InterlockedIncrement(a)
#   define uatomic_int_sub(a)           InterlockedDecrement(a)
#   define uatomic_int_set(a, newval)   InterlockedExchange(a, (newval))
#   define uatomic_int_get(a)           InterlockedCompareExchange(a, 0, 0)
#   define uatomic_int_zero(a)          InterlockedExchange(a, 0)
#   define uatomic_int_comp_exch(a, comp, exch)    InterlockedCompareExchange(a, (exch), (comp))

#   define uatomic_int_add_n(a, n)      InterlockedAdd(a, ((LONG)(n)))
#   define uatomic_int_sub_n(a, n)      InterlockedAdd(a, -((LONG)(n)))

typedef volatile LONG64      uatomic_int64;

#   define uatomic_int64_add(a)         InterlockedIncrement64(a)
#   define uatomic_int64_sub(a)         InterlockedDecrement64(a)
#   define uatomic_int64_set(a, newval) InterlockedExchange64(a, (newval))
#   define uatomic_int64_get(a)         InterlockedCompareExchange64(a, 0, 0)
#   define uatomic_int64_zero(a)        InterlockedExchange64(a, 0)
#   define uatomic_int64_comp_exch(a, comp, exch)    InterlockedCompareExchange64(a, (exch), (comp))

#   define uatomic_int64_add_n(a, n)    InterlockedAdd64(a, ((LONG64)(n)))
#   define uatomic_int64_sub_n(a, n)    InterlockedAdd64(a, -((LONG64)(n)))

typedef volatile PVOID       uatomic_ptr;

#   define uatomic_ptr_set(a, newval)   InterlockedExchangePointer(a, (newval))
#   define uatomic_ptr_get(a)           InterlockedCompareExchangePointer(a, 0, 0)
#   define uatomic_ptr_zero(a)          InterlockedExchangePointer(a, 0)
#   define uatomic_ptr_comp_exch(a, comp, exch)  InterlockedCompareExchangePointer(a, (exch), (comp))

#else
#   error Currently only Windows and Linux os are supported.
#endif


#if defined(__cplusplus)
extern "C"
{
#endif

/**
 * @brief 获取自旋锁（强等待，指数退避后让出CPU）
 * @param spinlockAddr 自旋锁地址
 */
static void bool_spinlock_grab(uatomic_bool* spinlockAddr, int spinsMax)
{
    // 一直等待
    int spins = 0;
    while (uatomic_int_comp_exch(spinlockAddr, 0, 1)) {
        ++spins;
        if (spins >= spinsMax) {
            sleep_usec((1 << spins));
            spins = 0;
        }
    }
}

/**
 * @brief 释放自旋锁
 * @param spinlockAddr 自旋锁地址
 * @note
 *   必须成对调用: bool_spinlock_grab, bool_spinlock_free
 */
static void inline bool_spinlock_free(uatomic_bool* spinlockAddr)
{
    uatomic_int_set(spinlockAddr, 0);
}

#ifdef __cplusplus
}
#endif

#endif /* _U_ATOMIC_H__ */
